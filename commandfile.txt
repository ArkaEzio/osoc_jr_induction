
1. git config
Git config command is super helpful. Especially when you are using Git for the first time, or you have a new Git installation. This command will set up your identity - Name and Email address. And this information will be used with every commit.

Usage

$ git config --global user.name "Your name"  

$ git config --global user.email "Your email"



2. git version
As its name implies, it's just to check which version of Git you are using. At the moment, writing this guide, the latest version of Git for Windows is 2.31.1. It was released on 27th March 2021.

Usage  

$ git version



3. git whatchanged
This command does the same thing as git log but in a raw form. And itâ€™s in the git because of historical reasons.

Usage

$ git whatchanged

4. git help
There are many commands in Git, and if you need more help with any command, you can use git help at any time from the terminal. 

Usage

$ git help <git_command>


5. git verify-tag
In the same way, you can confirm a tag.

Usage 

$ git verify-tag <tag>


6. git blame 
If you need to examine the content of any file line by line,  you need to use git blame. It helps you to determine who made the changes to a file.

Usage 

$ git blame <your_file_name>



7. git stash
This Git command temporarily stores your modified files. You can work in stashed with the following Git command. 

Usage 

$ git stash 

And you can view all of your stashes with the following command 

$ git stash list 

And if you need a apply a stash to a branch, simply use apply 

$ git stash apply 


8. git shortlog
The shortlog command shows you a summary from the Git log command. This command is helpful if you are just interested in the short summary. 

This command is helpful to see who worked on what as it group author with their commits.

Usage 

$ git shortlog  

Git Shortlog Results


9. git diff
Most of the time, you need to compare two git files or branches before you commit or push. Here is a handy command to do that. 

Usage

i) to compare the working directory with the local repo:

$ git diff HEAD <filename>

ii) to compare two branches:

$ git diff <source branch> <target branch>


10. git rebase 
Git rebase similar to the git merge command. It integrates two branches into a single branch with one exception. A git rebase command rewrites the commit history.

You should use the Git rebase command when you have multiple private branches to consolidate into a single branch. And it will make the commit history linear.

Usage 

$ git rebase <base>

Merged portion:-
My name is Arkaprabha Ghosh.
